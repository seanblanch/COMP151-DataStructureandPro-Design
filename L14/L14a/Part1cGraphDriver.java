package Lab14;import Lab14.ConnectedGraphInterface;/** * A driver that demonstrates the method isConnected * in the class UndirectedGraph. * * @author Frank M. Carrano * @version 4/30/2019 */public class Part1cGraphDriver{    public static void main(String[] args)    {        // create a graph like the one in Fig.28-1, but without the edges        // Hyannis-Barnstable and Orleans-Chatham; the graph is disconnected        ConnectedGraphInterface<String> roadMap = new UndirectedGraph<>();        roadMap.addVertex("Provincetown");        roadMap.addVertex("Truro");        roadMap.addVertex("Orleans");        roadMap.addVertex("Chatham");        roadMap.addVertex("Hyannis");        roadMap.addVertex("Falmouth");        roadMap.addVertex("Barnstable");        roadMap.addVertex("Sandwich");        roadMap.addEdge("Provincetown", "Truro");        roadMap.addEdge("Truro", "Orleans");        roadMap.addEdge("Chatham", "Hyannis");        roadMap.addEdge("Hyannis", "Falmouth");        roadMap.addEdge("Barnstable", "Sandwich");        roadMap.addEdge("Orleans", "Barnstable");        System.out.println("The graph in Figure 28-1\n" +                "without the edge joining Hyannis and Barnstable, and\n" +                "without the edge joining Orleans and Chatham is not connected:\n" +                "isConnected() returns " + roadMap.isConnected("Provincetown"));        // now add the edges Hyannis-Barnstable and Orleans-Chatham;        // the graph is connected and shown in Figure 28-1        roadMap.addEdge("Hyannis", "Barnstable");        roadMap.addEdge("Orleans", "Chatham");        System.out.println("\nThe original graph in Figure 28-1 with all of its edges is connected:\n" +                "isConnected() returns " + roadMap.isConnected("Provincetown"));    } // end main} // end Part1cGraphDriver/*The graph in Figure 28-1without the edge joining Hyannis and Barnstable, andwithout the edge joining Orleans and Chatham is not connected:isConnected() returns falseThe original graph in Figure 28-1 with all of its edges is connected:isConnected() returns true*/