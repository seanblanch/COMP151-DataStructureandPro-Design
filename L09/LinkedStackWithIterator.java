package Lab09;import java.util.EmptyStackException;import java.util.Iterator;import java.util.NoSuchElementException;/** * A class of stacks whose entries are stored in a chain of nodes. * This class provides an iterator. * * @author Frank M. Carrano * @version 3/26/2019 * @modifiedBy Sean Blanchard */public class LinkedStackWithIterator<T> implements Lab09.StackInterface<T>, Iterable<T>{    private Node topNode; // References the first node in the chain    public LinkedStackWithIterator()    {        this.topNode = null;    } // end default constructor    public void push(T newEntry)    {        this.topNode = new Node(newEntry, this.topNode);    } // end push    public T peek()    {        if (isEmpty())            throw new EmptyStackException();        else            return this.topNode.data;    } // end peek    public T pop()    {        T top = peek();  // Might throw EmptyStackException        this.topNode = this.topNode.next;        return top;    } // end pop    public boolean isEmpty()    {        return this.topNode == null;    } // end isEmpty    public void clear()    {        this.topNode = null;    } // end clear    private class Node    {        private T data; // Entry in stack        private Node next; // Link to next node        private Node(T dataPortion)        {            this(dataPortion, null);        } // end constructor        private Node(T data, Node next)        {            this.data = data;            this.next = next;        } // end constructor    } // end Node    public Iterator<T> iterator()    {        return new StackIterator();    } // end getIterator    private class StackIterator implements Iterator<T>    {        private Node nextNode; // Reference to next node in the iteration        private StackIterator()        {            this.nextNode = topNode;        } // end default constructor        public boolean hasNext()        {            return this.nextNode != null;        } // end hasNext        public T next()        {            // TODO Project 2            if(hasNext())            {                Node returnNode = nextNode;                nextNode = nextNode.next;                return returnNode.data;            }            else            {                throw new NoSuchElementException("Illegal call to next(); " +                        "iterator is below the bottom of the stack.");            }            //TODO done            //return null;        } // end next        public void remove()        {            // TODO Project 2            throw new UnsupportedOperationException("remove operation is not " +                    "supported by this stack iterator.");            // TODO done            // throws UnsupportedOperationException        } // end remove    } // end StackIterator    public static void main(String[] args)    {        System.out.println("Creating a stack");        LinkedStackWithIterator<String> myStack = new LinkedStackWithIterator<>();        System.out.println("\nCreating a stackIterator");        Iterator<String> stackIterator = myStack.iterator();        try        {            System.out.println("\nCalling stackIterator.next())");            System.out.println("stackIterator.next() returned = " + stackIterator.next());        } catch (NoSuchElementException nsee)        {            System.out.println("Exception caught \"" + nsee.getMessage() + "\"");        }        System.out.println("\nAdding to stack Jim, Jess, Jill, Jane, Joe");        myStack.push("Jim");        myStack.push("Jess");        myStack.push("Jill");        myStack.push("Jane");        myStack.push("Joe");        System.out.println("\nAccessing the top entry with iterator");        if (stackIterator.hasNext())        {            System.out.println("hasNext() returned true");            System.out.println("stackIterator.next() returned " + stackIterator.next());        } else            System.out.println("hasNext() returned false");        System.out.println("\nResetting the iterator");        stackIterator = myStack.iterator();        System.out.println("The stack contains (from top to bottom):");        while (stackIterator.hasNext())            System.out.println(stackIterator.next());        System.out.println("\nAdding to stack John");        myStack.push("John");        System.out.println("peek() returns: " + myStack.peek());        if (stackIterator.hasNext())        {            System.out.println("hasNext() returned true");            System.out.println("stackIterator.next() returned " + stackIterator.next());        } else            System.out.println("hasNext() returned false");        System.out.println("\nResetting the iterator");        stackIterator = myStack.iterator();        System.out.println("The stack contains (from top to bottom):");        while (stackIterator.hasNext())            System.out.println(stackIterator.next());        try        {            System.out.println("\nCalling stackIterator.remove())");            stackIterator.remove();        } catch (UnsupportedOperationException uoe)        {            System.out.println("Exception caught \"" + uoe.getMessage() + "\"");        }        System.out.println("\n\nDone.");    }  // end main} // end LinkedStackWithIterator