package Lab10;/** * A class that implements an interpolation search * of a sorted array of integers. Chapter 18 Project 2 * * @author Sean Blanchard * @version 4/2/2019 */public class InterpolationSearch{	/**	 * Searches a portion of a sorted array of integers for a given value.	 *	 * @param a           an array of integers sorted into ascending order	 * @param left        the integer index of the first array element;	 *                    left >= 0 and < a.length	 * @param right       the integer index of the last array element;	 *                    right - left >= 1; right < a.length	 * @param desiredItem the item sought	 * @return            the index of desiredItem, or -1 if not found	 */	public static int interpolationSearch(int[] a, int left, int right, int desiredItem)	{		// TODO Project 3		final int NOT_FOUND = -1;		//System.out.println("IMPLEMENT interpolationSearch recursively: desiredItem = " + desiredItem + "; left = " + left + "; right = " + right);		int p = left + ((desiredItem - a[left]) * (right - left)/(a[right] - a[left]));		// if desiredItem is at position left we found desiredItem		if(desiredItem==a[left])		{			return left;		}		// if position left is the same as position right		// or element at position left is the same as the element at position right - desiredItem is not found		if(left==right || a[left]==a[right])		{			return NOT_FOUND;		}		// if left and right are out of logical order - desiredItem is not found		if(left >= right)		{			return NOT_FOUND;		}		// if desiredItem is smaller than the first element in the sub-array or larger than the last element in the sub-array		// desiredItem is not found		if(desiredItem < a[left] || desiredItem > a[right])		{			return NOT_FOUND;		}		// otherwise compute p and search in a similar way as binary search would after computing mid		System.out.println("--> p = " + p);		if(desiredItem == a[p])		{			return p;		}		if(desiredItem < a[p])		{			return interpolationSearch(a, left, p-1, desiredItem);		}		else		{			return interpolationSearch(a, p+1, right, desiredItem);		}	} // end interpolationSearch	// some simple test cases of interpolation seach	public static void main(String[] args)	{		int a[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22};		System.out.print("Searching uniformly distributed sorted array: ");		for (int element : a)			System.out.print(element + " ");		System.out.println();		System.out.println();		int foundIndex = InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 14);		if (foundIndex == 13)			System.out.println("PASSES: 14 was found at index 13");		else			System.out.println("FAILS: 14 was not found at index 13; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 1);		if (foundIndex == 0)			System.out.println("PASSES: 1 was found at index 0");		else			System.out.println("FAILS: 1 was not found at index 0; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 22);		if (foundIndex == 21)			System.out.println("PASSES: 22 was found at index 21");		else			System.out.println("FAILS: 22 was not found at index 21; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 20);		if (foundIndex == 19)			System.out.println("PASSES: 20 was found at index 19");		else			System.out.println("FAILS: 20 was not found at index 19; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 23456);		if (foundIndex == -1)			System.out.println("PASSES: 23456 was not found");		else			System.out.println("FAILS: 23456 was found; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(a, 0, a.length - 1, -6);		if (foundIndex == -1)			System.out.println("PASSES: -6 was not found");		else			System.out.println("FAILS: -6 was found; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(a, 0, a.length - 1, 12);		if (foundIndex == 11)			System.out.println("PASSES: 12 was found at index 11");		else			System.out.println("FAILS: 12 was not found at index 11; interpolationSearch returned " + foundIndex);		int b[] = {-10, -5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 200, 700, 12345};		System.out.print("\n\nSearching non-uniformly distributed sorted array: ");		for (int element : b)			System.out.print(element + " ");		System.out.println();		System.out.println();		foundIndex = InterpolationSearch.interpolationSearch(b, 0, b.length - 1, 14);		if (foundIndex == 13)			System.out.println("PASSES: 14 was found at index 13");		else			System.out.println("FAILS: 14 was not found at index 13; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(b, 0, b.length - 1, -10);		if (foundIndex == 0)			System.out.println("PASSES: -10 was found at index 0");		else			System.out.println("FAILS: -10 was not found at index 0; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(b, 0, b.length - 1, 12345);		if (foundIndex == 21)			System.out.println("PASSES: 12345 was found at index 21");		else			System.out.println("FAILS: 12345 was not found at index 21; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(b, 0, b.length - 1, 200);		if (foundIndex == 19)			System.out.println("PASSES: 200 was found at index 19");		else			System.out.println("FAILS: 200 was not found at index 19; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(b, 0, b.length - 1, 23456);		if (foundIndex == -1)			System.out.println("PASSES: 23456 was not found");		else			System.out.println("FAILS: 23456 was found; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(b, 0, b.length - 1, -6);		if (foundIndex == -1)			System.out.println("PASSES: -6 was not found");		else			System.out.println("FAILS: -6 was found; interpolationSearch returned " + foundIndex);		foundIndex = InterpolationSearch.interpolationSearch(b, 0, b.length - 1, 12);		if (foundIndex == 11)			System.out.println("PASSES: 12 was found at index 11");		else			System.out.println("FAILS: 12 was not found at index 11; interpolationSearch returned " + foundIndex);		System.out.println("\n*** Done ***");	} // end main} // end Search