import java.util.Arrays;/** * A class that implements the ADT set by using a resizable array. * The array is never full. * * @author Sean Blanchard * @version 2/4/19 */public class ArraySetWithArray<T extends Comparable<? super T>> implements SetInterface<T>{    private T[] setOfEntries;    private int numberOfEntries;    private boolean initialized = false;    private static final int DEFAULT_CAPACITY = 3; // Initial capacity of array    private static final int MAX_CAPACITY = 10000;    /**     * Creates an empty array whose initial capacity is 3.     */    public ArraySetWithArray()    {        //TODO Project2        this(DEFAULT_CAPACITY);        //TODO end    } // end default constructor    /**     * Creates an empty array having a given initial capacity.     *     * @param capacity The integer capacity desired.     */    public ArraySetWithArray(int capacity)    {        //TODO Project2        checkCapacity(capacity);        T[] tempSetOfEntries = (T[]) new Comparable<?>[capacity]; // Unchecked cast        this.setOfEntries = tempSetOfEntries;        this.numberOfEntries = 0;        this.initialized = true;        //TODO end    } // end constructor    /**     * Creates an array containing given entries.     *     * @param contents An array of objects.     */    public ArraySetWithArray(T[] contents)    {        //TODO Project2        this(contents.length);        for(int i = 0; i < contents.length; i++)        {            if (contents[i] == null) {                System.out.println("null");            } else {                this.add(contents[i]);            }        }        //TODO end    } // end constructor    /**     * Throws an exception if the client requests a capacity that is too large.     */    private void checkCapacity(int capacity)    {        if (capacity > MAX_CAPACITY)            throw new IllegalStateException("Attempt to create a bag whose capacity exceeds " +                    "allowed maximum of " + MAX_CAPACITY);    } // end checkCapacity    /**     * Throws an exception if receiving object is not initialized.     */    private void checkInitialization()    {        if (!this.initialized)            throw new SecurityException("Uninitialized object used " +                    "to call an ArrayBag method.");    } // end checkInitialization    /**     * Adds a new entry to this array, avoiding duplicates.     *     * @param newEntry The object to be added as a new entry.     * @return True if the addition is successful, or false if not.     */    public boolean add(T newEntry)    {        //TODO Project2        checkInitialization();        boolean result = false;        if(newEntry != null && !contains(newEntry))        {            ensureCapacity();            this.setOfEntries[this.numberOfEntries] = newEntry;            this.numberOfEntries++;            result = true;        }        return result; //THIS IS A STUB        //TODO end    } // end add    /**     * Checks if the set is full; if it is full doubles its size     */    private void ensureCapacity()    {        //TODO Project2        if (this.numberOfEntries >= this.setOfEntries.length)        {            int newLength = 2 * this.setOfEntries.length;            checkCapacity(newLength);            this.setOfEntries = Arrays.copyOf(this.setOfEntries, newLength);        }        //TODO end    } // end ensureCapacity    /**     * Retrieves all entries that are in this array.     *     * @return A newly allocated array of all the entries.     */    public T[] toArray()    {        //TODO Project2        checkInitialization();        T[] result = (T[]) new Comparable<?>[this.numberOfEntries];        for (int i = 0; i < this.numberOfEntries; i++)        {            result[i] = this.setOfEntries[i];        }        return result; //THIS IS A STUB        //TODO end    } // end toArray    /**     * Sees whether this array is empty.     *     * @return True if this array is empty, or false if not.     */    public boolean isEmpty()    {        //TODO Project2        return this.numberOfEntries == 0;        //TODO end    } // end isEmpty    /**     * Gets the number of entries currently in this array.     *     * @return The integer number of entries currently in the array.     */    public int getCurrentSize()    {        //TODO Project2        return this.numberOfEntries; //THIS IS A STUB        //TODO end    } // end getCurrentSize    /**     * Tests whether this array contains a given entry.     *     * @param anEntry The entry to locate.     * @return True if the array contains anEntry, or false if not.     */    public boolean contains(T anEntry)    {        //TODO Project2        checkInitialization();        return getIndexOf(anEntry) >= 0;        // utilize getIndexOf method        //TODO end    } // end contains    /**     * Locates a given entry within the array bag.     * Returns the index of the entry, if located,     * or -1 otherwise.     * Precondition: checkInitialization has been called.     */    private int getIndexOf(T anEntry)    {        int where = -1;        // TODO Project 2        boolean stillLooking = true;        for (int i = 0; stillLooking && (i < this.numberOfEntries); i++)        {            if (anEntry.equals(this.setOfEntries[i]))            {                stillLooking = false;                where = i;            }        }        return where;        //TODO end    } // end getIndexOf    /**     * Removes all entries from this array.     */    public void clear()    {        //TODO Project2        checkInitialization();        while (!isEmpty())            remove();        //TODO end    } // end clear    /**     * Removes one unspecified entry from this bag.     *     * @return Either the removed entry if the removal     * was successful, or null if not.     */    public T remove()    {        //TODO Project2        checkInitialization();        return removeEntry(this.numberOfEntries -1);        //THIS IS A STUB        //TODO end    } // end remove    /**     * Removes one occurrence of a given entry from this array.     *     * @param anEntry The entry to be removed.     * @return True if the removal was successful, or null if not.     */    public boolean removeElement(T anEntry)    {        //TODO Project2        checkInitialization();        int i = getIndexOf(anEntry);        T result = removeEntry(i);        return anEntry.equals(result);        //TODO end    } // end removeElement    // Removes and returns the array entry at a given index.    // If no such entry exists, returns null.    private T removeEntry(int givenIndex)    {        //TODO Project2        T result = null;        if (!isEmpty() && (givenIndex >= 0))        {            result = this.setOfEntries[givenIndex];            this.numberOfEntries--;            this.setOfEntries[givenIndex] = this.setOfEntries[this.numberOfEntries];            this.setOfEntries[this.numberOfEntries] = null;        }        return result; //THIS IS A STUB        //TODO end    } // end removeEntry    // Displays a set.    // If the set is empty displays a message that the set is empty and display the capacity    // if the set is not empty displays the number of elements, capacity and the content of the set    public void displaySet()    {        //TODO Project2        if (this.isEmpty())        {            System.out.println("The set is empty; with the capacity " + this.setOfEntries.length);        } else {            System.out.println("The set contains " + this.numberOfEntries + " String(s); capacity is " + this.setOfEntries.length);            T[] excessBag = this.toArray();            for (T entry : excessBag )                System.out.print( entry + " ");            System.out.println();        }        //TODO end    } // end displaySet    public static void main(String[] args)    {        String[] inputData = {"A", "B", "C", "D", "A", "C", "B", "B"};        System.out.println("--> Creating aSet with the secondary constructor - capacity of " + inputData.length);        SetInterface<String> aSet = new ArraySetWithArray<>(inputData.length);        System.out.println("--> Adding elements from inputData to aSet");        for (int i = 0; i < inputData.length; i++)            aSet.add(inputData[i]);        aSet.displaySet();        System.out.println("\n--> Clearing aSet");        aSet.clear();        aSet.displaySet();        System.out.println("--> aSet isEmpty returns \n" + aSet.isEmpty());        System.out.println("--> The number of elements in aSet is \n" + aSet.getCurrentSize());        System.out.println("\n--> Creating set1 with default constructor");        SetInterface<String> set1 = new ArraySetWithArray<>();        // Initial capacity is 3        System.out.println("--> set1 initially empty, capacity should be 3:");        set1.displaySet();        System.out.println("\n--> Adding elements to set1");        set1.add("A");        set1.add("A");        set1.add("B");        set1.add("A");        set1.add("C");        set1.add("A");        System.out.println("--> set1 after adding elements, capacity should be 3:");        set1.displaySet();        System.out.println("\n--> Adding elements to set1");        set1.add("V");        set1.add("V");        set1.add("T");        set1.add("U");        set1.add("V");        set1.add("W");        set1.add("X");        set1.add("Y");        set1.add("Z");        System.out.println("\n--> set1 after adding more elements which should have triggered resizing, and the capacity should be 12:");        set1.displaySet();        System.out.println("\n--> set1 contains \"A\":\n" + set1.contains("A"));        System.out.println("--> set1 contains \"E\":\n" + set1.contains("E"));        System.out.println("\n--> Removing \"B\" from set1");        set1.removeElement("B");        System.out.println("--> After removing \"B\" from set1:");        set1.displaySet();        System.out.println("--> Removing random element from set1");        System.out.println("--> After removing \"" + set1.remove()                + "\" from set1:");        set1.displaySet();        System.out.println("\n--> Trying to remove \"Q\" from set1");        set1.removeElement("Q");        System.out.println("--> After trying to remove non-existent element \"Q\" from set1:");        set1.displaySet();        System.out.println("\n--> Adding 4 elements to set1");        set1.add("K");        set1.add("L");        set1.add("M");        set1.add("N");        System.out.println("--> After adding 4 elements to set1:");        set1.displaySet();        System.out.println("--> Adding 1 element to set1");        set1.add("O");        System.out.println("--> After adding 1 more element to set1:");        set1.displaySet();        System.out.println("\n--> Creating set2 with the secondary constructor that takes an array as input");        SetInterface<String> set2 = new ArraySetWithArray<>(inputData);        set2.displaySet();        System.out.println("--> Adding more elements to set2");        set2.add("A");        set2.add("B");        set2.add("B");        set2.add("A");        set2.add("C");        set2.add("C");        set2.add("D");        set2.add("E");        set2.add("F");        set2.add("G");        set2.add("H");        System.out.println("--> set2 after adding:");        set2.displaySet();        System.out.println("\nTrying to add null entry");        String nullEntry = null;        set2.add(nullEntry);        System.out.println("--> set2 after adding:");        set2.displaySet();    }} // end ArraySetWithArray