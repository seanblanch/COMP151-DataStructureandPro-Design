import java.util.HashSet;/** * A class that implements the ADT set by using a ResizableArrayBag. * * @author Sean Blanchard * @version 2/4/19 */public class ArraySetWithResizableArrayBag<T extends Comparable<? super T>> implements SetInterface<T>{    private ResizableArrayBag<T> setOfEntries;    public ArraySetWithResizableArrayBag()    {        //TODO Project1        this.setOfEntries = new ResizableArrayBag<>();        //TODO end    } // end default constructor    public ArraySetWithResizableArrayBag(int capacity)    {        //TODO Project1        this.setOfEntries = new ResizableArrayBag<>(capacity);        //TODO end    } // end of secondary constructor    public ArraySetWithResizableArrayBag(T[] contents) {        //TODO Project1        this.setOfEntries = new ResizableArrayBag<>();        for (int i = 0; i < contents.length; i++) {            if (contents[i] == null) {                System.out.println("null");            } else {                this.setOfEntries.add(contents[i]);            }        }        //TODO end    }    public void clear()    {        this.setOfEntries.clear();    } // end clear    public boolean add(T newEntry)    {        //TODO Project1        //cannot contain duplicates, use contains method        boolean success = true;        if(newEntry != null && !setOfEntries.contains(newEntry))        {             this.setOfEntries.add(newEntry);        }        else{            success = false;        }        return success;        //TODO end    } // end add    public boolean removeElement(T anEntry)    {        //TODO Project1        return this.setOfEntries.removeElement(anEntry);         //THIS IS A STUB        //TODO end    } // end remove    public T remove()    {        //TODO Project1        return this.setOfEntries.remove();         //THIS IS A STUB        //TODO end    } // end remove    public boolean contains(T anEntry)    {        //TODO Project1        return this.setOfEntries.contains(anEntry);        //TODO end    } // end contains    public int getCurrentSize()    {        //TODO Project1        return this.setOfEntries.getCurrentSize();        //TODO end         //THIS IS A STUB    } // end getCurrentSize    public boolean isEmpty()    {        //TODO Project1        return this.setOfEntries.isEmpty();        //TODO end         //THIS IS A STUB    } // end getLength    public T[] toArray()    {        //TODO Project1        return this.setOfEntries.toArray();        //TODO end        //return this.setOfEntries.toArray();        //return null; //THIS IS A STUB    } // end toArray    // Displays a set.    // If the set is empty displays a message that the set is empty    // if the set is not empty displays the number of elements and the content of the set    public void displaySet()    {        //TODO Project1        if (!this.setOfEntries.isEmpty()) {            System.out.println("The set contains " + this.setOfEntries.getCurrentSize() + " String(s): ");            this.setOfEntries.toArray();//            for (int i = 0; i < setOfEntries.getCurrentSize(); i++) {//                //this.setOfEntries.toArray();//                System.out.println(this.setOfEntries);//            }            T[] excessBag = this.toArray();            for (T entry : excessBag )                System.out.print( entry + " ");            System.out.println();        }         else            System.out.println("The bag is empty");         //TODO end    } // end displaySet    public static void main(String[] args)    {        String[] inputData = {"A", "B", "C", "D", "A", "C", "B", "B"};        System.out.println("--> Creating aSet with the secondary constructor - capacity of " + inputData.length);        SetInterface<String> aSet = new ArraySetWithResizableArrayBag<>(inputData.length);        System.out.println("--> Adding elements from inputData to aSet");        for (int i = 0; i < inputData.length; i++)            aSet.add(inputData[i]);        aSet.displaySet();        System.out.println("\n--> Clearing aSet");        aSet.clear();        aSet.displaySet();        System.out.println("--> aSet isEmpty returns \n" + aSet.isEmpty());        System.out.println("--> The number of elements in aSet is \n" + aSet.getCurrentSize());        System.out.println("\n--> Creating set1 with default constructor");        SetInterface<String> set1 = new ArraySetWithResizableArrayBag<>();        // Initial capacity is 3        System.out.println("--> set1 initially empty");        set1.displaySet();        System.out.println("\n--> Adding elements to set1");        set1.add("A");        set1.add("A");        set1.add("B");        set1.add("A");        set1.add("C");        set1.add("A");        System.out.println("--> set1 after adding elements");        set1.displaySet();        System.out.println("\n--> Adding elements to set1");        set1.add("V");        set1.add("V");        set1.add("T");        set1.add("U");        set1.add("V");        set1.add("W");        set1.add("X");        set1.add("Y");        set1.add("Z");        System.out.println("\n--> set1 after adding more elements");        set1.displaySet();        System.out.println("\n--> set1 contains \"A\":\n" + set1.contains("A"));        System.out.println("--> set1 contains \"E\":\n" + set1.contains("E"));        System.out.println("\n--> Removing \"B\" from set1");        set1.removeElement("B");        System.out.println("--> After removing \"B\" from set1:");        set1.displaySet();        System.out.println("--> Removing random element from set1");        System.out.println("--> After removing \"" + set1.remove()                + "\" from set1:");        set1.displaySet();        System.out.println("\n--> Trying to remove \"Q\" from set1");        set1.removeElement("Q");        System.out.println("--> After trying to remove non-existent element \"Q\" from set1:");        set1.displaySet();        System.out.println("\n--> Adding 4 elements to set1");        set1.add("K");        set1.add("L");        set1.add("M");        set1.add("N");        System.out.println("--> After adding 4 elements to set1:");        set1.displaySet();        System.out.println("--> Adding 1 element to set1");        set1.add("O");        System.out.println("--> After adding 1 more element to set1:");        set1.displaySet();        System.out.println("\n--> Creating set2 with the secondary constructor that takes an array as input");        SetInterface<String> set2 = new ArraySetWithResizableArrayBag<>(inputData);        set2.displaySet();        System.out.println("--> Adding more elements to set2");        set2.add("A");        set2.add("B");        set2.add("B");        set2.add("A");        set2.add("C");        set2.add("C");        set2.add("D");        set2.add("E");        set2.add("F");        set2.add("G");        set2.add("H");        System.out.println("--> set2 after adding:");        set2.displaySet();        System.out.println("\nTrying to add null entry");        String nullEntry = null;        set2.add(nullEntry);        System.out.println("--> set2 after adding:");        set2.displaySet();    }} // end ArraySetWithResizableArrayBag