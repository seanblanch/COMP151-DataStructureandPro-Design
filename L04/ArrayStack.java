import java.util.Arrays;import java.util.EmptyStackException;/** A class of stacks whose entries are stored in an array. @author Sean Blanchard @version 02/12/2019 */public final class ArrayStack<T> implements TextbookStackInterface<T>{	// TODO PROJECT #2 - be sure to examine the hand-written example in the lab description	private T[] myStack;    // array of myStack entries	private int topIndex; // index of top entry	private boolean initialized = false;	private static final int DEFAULT_CAPACITY = 50;	private static final int MAX_CAPACITY = 10000;	public ArrayStack()	{		// TODO PROJECT #2		this(DEFAULT_CAPACITY);	} // end default constructor	public ArrayStack(int initialCapacity)	{		// TODO PROJECT #2		checkCapacity(initialCapacity);		T[] tempStack = (T[])new Object [initialCapacity];		this.myStack = tempStack;		this.topIndex = DEFAULT_CAPACITY;		initialized = true;	} // end constructor	public void push(T newEntry)	{		// TODO PROJECT #2		checkInitialization();		ensureCapacity();		this.myStack[this.topIndex - 1] = newEntry; // Add new entry		this.topIndex--; //Decrease topIndex	} // end push	public T peek() throws InsufficientNumberOfElementsOnStackException	{		// TODO PROJECT #2		checkInitialization();		if (isEmpty())		{			throw new InsufficientNumberOfElementsOnStackException("peek operation failed");		}		return this.myStack[this.topIndex]; // THIS IS A STUB	} // end peek	public T pop() throws InsufficientNumberOfElementsOnStackException	{		// TODO PROJECT #2		checkInitialization();		if (isEmpty())		{			throw new InsufficientNumberOfElementsOnStackException("pop operation failed");		}		T top = this.myStack[this.topIndex];		this.myStack[this.topIndex] = null;		this.topIndex++;		return top; // THIS IS A STUB	} // end pop	public boolean isEmpty()	{		// TODO PROJECT #2		return topIndex == this.myStack.length;		//TODO done	} // end isEmpty	public void clear()	{		// TODO PROJECT #2		while (!isEmpty())		{			pop();		}	} // end clear	// Throws an exception if this object is not initialized.	private void checkInitialization() throws SecurityException	{		// TODO PROJECT #2		initialized = true;		if (initialized = false)		{			throw new SecurityException("Object is not initialized");		}	} // end checkInitialization	// Throws an exception if the client requests a capacity that is too large.	private void checkCapacity(int capacity) throws IllegalStateException	{		// TODO PROJECT #2		if (capacity > MAX_CAPACITY )		{			throw new InsufficientNumberOfElementsOnStackException("The capacity is too large.");		}	} // end checkCapacity	// Doubles the size of the array myStack if it is full	// Precondition: checkInitialization has been called.	private void ensureCapacity()	{		// TODO PROJECT #2		if (this.topIndex == this.myStack.length - 1) // If array is full, double its size		{			this.myStack = Arrays.copyOf(this.myStack, 2 * this.myStack.length);		}	} // end ensureCapacity	// These methods are only for testing of the array implementation	// and are fully implemented	public int getTopIndex()	{		return this.topIndex;	}	public int getCapacity() { return this.myStack.length; }	public static void main(String[] args)	{		System.out.println("*** Creating a stack with default constructor ***");		TextbookStackInterface<String> defaultStack = new ArrayStack<>();		System.out.println("---> The stack capacity is set by the constructor to: " + defaultStack.getCapacity());		System.out.println("---> The topIndex is: " + defaultStack.getTopIndex());		System.out.println("\n---> isEmpty() returns " + defaultStack.isEmpty());		int topLocation = defaultStack.getTopIndex();		int capacity = defaultStack.getCapacity();		if (topLocation == capacity)			System.out.println("CORRECT - the top index is set to " + capacity);		else			System.out.println("INCORRECT - the top index is set to " + topLocation);		System.out.println("\n---> Adding to stack to get: " +				"Joe Jane Jill Jess Jim");		defaultStack.push("Jim");		defaultStack.push("Jess");		defaultStack.push("Jill");		defaultStack.push("Jane");		defaultStack.push("Joe");		System.out.println("---> Done adding 5 elements; the topIndex is: " + defaultStack.getTopIndex());		System.out.println("---> isEmpty() returns " + defaultStack.isEmpty());		System.out.println("\n--> Testing peek and pop:");		while (!defaultStack.isEmpty())		{			String top = defaultStack.peek();			System.out.println(top + " is at the top of the stack.");			top = defaultStack.pop();			System.out.println(top + " is removed from the stack.");		} // end while		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + defaultStack.isEmpty());		System.out.println("\n--> Adding to stack to get: " +				"Jim Jess Joe");		defaultStack.push("Joe");		defaultStack.push("Jess");		defaultStack.push("Jim");		System.out.println("---> Done adding 3 elements; the topIndex is: " + defaultStack.getTopIndex());		System.out.println("\n--> Testing clear:");		defaultStack.clear();		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + defaultStack.isEmpty());		try		{			System.out.println("defaultStack.peek() returns: ");			System.out.println(defaultStack.peek());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		try		{			System.out.println("defaultStack.pop() returns: ");			System.out.println(defaultStack.pop());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		System.out.println("\n\n*** Creating a stack with the secondary constructor ***");		TextbookStackInterface<String> smallStack = new ArrayStack<>(3);		System.out.println("---> The stack capacity is set by the constructor to: " + smallStack.getCapacity());		System.out.println("---> The topIndex is: " + smallStack.getTopIndex());		System.out.println("\n--> isEmpty() returns " + smallStack.isEmpty());		System.out.println("\n--> Adding to stack to get: " +				"Joe Jane Jill Jess Jim");		smallStack.push("Jim");		smallStack.push("Jess");		smallStack.push("Jill");		smallStack.push("Jane");		smallStack.push("Joe");		System.out.println("---> Done adding 5 elements; the topIndex is: " + smallStack.getTopIndex());		System.out.println("--> isEmpty() returns " + smallStack.isEmpty());		System.out.println("\n-->Testing peek and pop:");		while (!smallStack.isEmpty())		{			String top = smallStack.peek();			System.out.println(top + " is at the top of the stack.");			top = smallStack.pop();			System.out.println(top + " is removed from the stack.");		} // end while		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + smallStack.isEmpty());		topLocation = smallStack.getTopIndex();		capacity = smallStack.getCapacity();		if (topLocation == capacity)			System.out.println("CORRECT - the top index is set to " + capacity);		else			System.out.println("INCORRECT - the top index is set to " + topLocation);		System.out.println("\n--> Adding to stack to get: " +				"Jim Jess Joe");		smallStack.push("Joe");		smallStack.push("Jess");		smallStack.push("Jim");		System.out.println("---> Done adding 3 elements; the topIndex is: " + smallStack.getTopIndex());		System.out.println("\n--> Testing clear:");		smallStack.clear();		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + smallStack.isEmpty());		try		{			System.out.println("smallStack.peek() returns: ");			System.out.println(smallStack.peek());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		try		{			System.out.println("smallStack.pop() returns: ");			System.out.println(smallStack.pop());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		System.out.println("*** Done ***");	} // end main} // end ArrayStack